:PROPERTIES:
:ID:       fa870da3-03df-4ed4-8282-bf34abc24f11
:END:
#+title: Natas11
* Previous
[[id:cbf374b4-6fb3-4971-83c0-cda46f57beab][Natas10]]

* Password
U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK

* Flag
EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3

* Notes

From top page:
#+begin_quote
Cookies are protected with XOR encryption<br/><br/>
<form>
Background color: <input name=bgcolor value="#ffffff">
<input type=submit value="Set color">
</form>
#+end_quote

From source page:
#+begin_src html
<?

$defaultdata = array( "showpassword"=>"no", "bgcolor"=>"#ffffff");

function xor_encrypt($in) {
  $key = '<censored>';
  $text = $in;
  $outText = '';

  // Iterate through each character
  for($i=0;$i < strlen($text);$i++) {
    $outText .= $text[$i] ^ $key[$i % strlen($key)];
  }

  return $outText;
}

function loadData($def) {
  global $_COOKIE;
  $mydata = $def;

  if(array_key_exists("data", $_COOKIE)) {
    $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE["data"])), true);

    if(is_array($tempdata) && array_key_exists("showpassword", $tempdata) && array_key_exists("bgcolor", $tempdata)) {

      if (preg_match('/^#(?:[a-f\d]{6})$/i', $tempdata['bgcolor'])) {
        $mydata['showpassword'] = $tempdata['showpassword'];
        $mydata['bgcolor'] = $tempdata['bgcolor'];
      }
    }
  }
  return $mydata;
}

function saveData($d) {
  setcookie("data", base64_encode(xor_encrypt(json_encode($d))));
}

$data = loadData($defaultdata);

if(array_key_exists("bgcolor",$_REQUEST)) {

  if (preg_match('/^#(?:[a-f\d]{6})$/i', $_REQUEST['bgcolor'])) {
    $data['bgcolor'] = $_REQUEST['bgcolor'];
  }
}

saveData($data);
?>

<h1>natas11</h1>

[...]

Cookies are protected with XOR encryption

<?
  if($data["showpassword"] == "yes") {
    print "The password for natas12 is <censored>";
  }
?>

<form>
[...]
#+end_src

- The end goal is to send {"showpassword":"yes","bgcolor":"#fffff"} in a cookie.
- The cookies are 'XOR cyphered'. The cypher function is visible in the sourcecode, but the key is censored.

Encoded data in cookie :
#+begin_quote
ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw%3D
#+end_quote
- The `%3D` at the end is an url entity which can be decoded with the `urllib` module. It converts to `=` padding.
- We can work out the key as know the beginning and result values.
- After fiddling with cyberchef, I found out the key length : 4
- Found the key was : qw8J
- Another way of finding the key is by using the auto-inverse property of the xor function: plaintext ^ cipher = key repeating pattern
- We can now encrypt our cookie using the key.

#+begin_src python :results output
#!/usr/bin/env python3

import requests
import re
import html
import urllib
import base64
from bs4 import BeautifulSoup as bs
from natas_pass import passwords

session = requests.Session()
username = "natas11"
password = passwords[username]

url = "http://{}.natas.labs.overthewire.org/".format(username)

# response = session.get(url, auth=(username, password))
# content = response.text
# print(content)

# response = session.get(url + "index-source.html", auth=(username, password))
# raw_content = response.text
# sourcecode = html.unescape(raw_content)
# soup = bs(sourcecode)
# print(soup.prettify())

response = requests.get(
    url,
    auth=(username, password)
)

plaintext = '{"showpassword":"no","bgcolor":"#ffffff"}'.encode()
b64_encoded_cookie = urllib.parse.unquote(response.cookies['data'])
encoded_cookie = base64.b64decode(b64_encoded_cookie)

out = ""
for i in range(len(encoded_cookie)) :
    out += chr(plaintext[i] ^ encoded_cookie[i])

key = out[0:4]

plaintext_yes = '{"showpassword":"yes","bgcolor":"#ffffff"}'
encoded_yes = ""
for i in range(len(plaintext_yes)):
    encoded_yes += chr(ord(plaintext_yes[i]) ^ ord(key[i % len(key)]))

encoded_yes = base64.b64encode(encoded_yes.encode()).decode('utf-8')
# print(encoded_yes)

jar = requests.cookies.RequestsCookieJar()
jar.set("data", encoded_yes)
response = requests.get(
    url,
    auth=(username, password),
    cookies=jar
)
raw_content = response.text
# sourcecode = html.unescape(raw_content)
# soup = bs(sourcecode, features="html.parser")
# headers = response.headers
# print(headers)
# print(soup.prettify())

p = re.findall("([a-zA-Z0-9]{32})", raw_content)

if p and p[0] == password:
    p.pop(0)

if p :
    print(p[0])
#+end_src

#+RESULTS:
: EDXp0pS26wLKHZy1rDBPUZk0RKfLGIR3

* Next
[[id:fdd79b13-1484-46a9-a443-bd8432d7da31][Natas12]]
